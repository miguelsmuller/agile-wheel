[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


##############################################################################
# 1. Metadados PEP 621 – Poetry em “package‑mode” lê tudo daqui
##############################################################################
[project]
name = "agile-wheel"
version = "0.1.0"
description = "Agile Wheel - real time agile assessment dynamics"
readme = "README.md"

authors = [
    {name = "Miguel Muller",email = "miguelsmuller@users.noreply.github.com"}
]

requires-python = "==3.12.0"

dependencies = [
    "fastapi>=0.115.12,<0.116.0",
    "uvicorn[standard]>=0.34.0,<0.35.0",
    "python-dotenv>=1.1.0,<2.0.0",
    "pydantic[email]>=2.11.2,<3.0.0",
    "beanie>=1.29.0,<2.0.0",
    "motor>=3.7.0,<4.0.0",
    "pydantic-settings>=2.8.1,<3.0.0",
    "poethepoet[poetry-plugin] (>=0.33.1,<0.34.0)",
    "pytz (>=2025.2,<2026.0)"
]

[project.urls]
Homepage = "https://github.com/miguelsmuller/agile-wheel"


##############################################################################
# 2. Seção “tool.poetry” – apenas o que o Poetry ainda exige
##############################################################################
[tool.poetry]
package-mode = true

packages = [{ include = "src" }]


##############################################################################
# 3. Dependências e configs de desenvolvimento
##############################################################################
[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^0.26.0"
pdbpp = ">=0.11.6,<0.12.0"
ruff = ">=0.11.4"
mypy = ">=1.15.0"
mongomock-motor = "^0.0.35"
pytest-cov = "^6.1.1"


##############################################################################
# 4. Pytest/Ruff/Mypy – atualize paths
##############################################################################
[tool.pytest.ini_options]
# pythonpath = ["src"]
testpaths = ["./"]
asyncio_mode = "auto"
# when project expands, change to "session"
asyncio_default_fixture_loop_scope = "function"
# env_override_existing_values = 1
# env_files = [".env.test"]
# filterwarnings = [
#     "ignore::DeprecationWarning:callee.*",
#     "ignore:.*The `__fields__` attribute is deprecated:DeprecationWarning",
#     "ignore:.*invalid escape sequence:DeprecationWarning:callee.*",
#     "ignore::DeprecationWarning:pydantic_core.*",
#     "ignore::DeprecationWarning:fastapi.*",
#     "ignore::DeprecationWarning:pydantic.*",
# ]
filterwarnings = [
    "ignore:Accessing the 'model_fields' attribute on the instance is deprecated:DeprecationWarning",
    "ignore:.*The `__fields__` attribute is deprecated:DeprecationWarning"
]

[tool.ruff]
line-length = 99
src = ["src", "tests"]
target-version = "py312"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # flake8-bandit - use of assert detected
]
[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]
ignore = [
    "ISC001", # flake8-implicit-str-concat - single line implicit string concatenation
    "B008",   # flake8-bugbear - do not perform function calls in argument defaults
    "D100",   # pydocstyle - missing docstring in public module
    "D101",   # pydocstyle - missing docstring in public class
    "D102",   # pydocstyle - missing docstring in public method
    "D103",   # pydocstyle - missing docstring in public function
    "D104",   # pydocstyle - missing docstring in public package
    "D105",   # pydocstyle - missing docstring in magic method
    "D106",   # pydocstyle - missing docstring in public nested class
    "D107",   # pydocstyle - missing docstring in __init__
    "D202",   # pydocstyle - no blank lines allowed after function docstring
    "D203",   # pydocstyle - 1 blank line required before class docstring
    "D205",   # pydocstyle - 1 blank line required between summary line and description
    "D211",   # pydocstyle - no blank lines allowed before class docstring
    "D213",   # pydocstyle - no blank lines allowed between summary line and description
    "D415",   # pydocstyle - first line should end with a period, question mark, or exclamation point
    "A003",   # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",   # flake8-bugbear - do not call setattr with a constant attribute value
    "RUF012", # Ruff-specific rule,
    "ERA001", # Found commented-out code
    "BLE001", # Do not catch blind exception: `Exception`

]

[[tool.mypy.overrides]]
module = ["callee"]
ignore_missing_imports = true


##############################################################################
# 5. Tarefas do Poe the Poet – rode sempre a partir da raiz
##############################################################################
[tool.poe.tasks]
serve = "uvicorn src.main:app --reload"
ruff = "ruff check --fix ."

