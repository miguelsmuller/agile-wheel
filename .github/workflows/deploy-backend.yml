name: Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  run-tests:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'

      - name: Instalar Poetry
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Instalar dependências
        working-directory: backend
        run: |
          poetry install

      - name: Lint
        working-directory: backend
        run: |
          poetry run ruff check

      - name: Tests
        working-directory: backend
        run: |
          poetry run pytest --cov=src --cov-report=xml

      - name: Salvar cobertura como artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/coverage.xml

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Baixar cobertura do job anterior
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: SonarCloud - Backend
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}

  image:
    name: Publish Image
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Git commit hash
        id: extract_git_hash
        run: echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            miguelsmuller/agile-wheel-backend:latest
            miguelsmuller/agile-wheel-backend:${{ steps.extract_git_hash.outputs.GIT_HASH }}

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: image
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Git commit hash
        id: extract_git_hash
        run: echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: 'agile-wheel'
          workload_identity_provider: ${{ vars.GCP_WIF_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          env_vars_update_strategy: 'overwrite'
          env_vars: |
            ENV=${{ vars.ENV }}
            INTERNAL_PORT=8080
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ vars.DB_PORT }}
            ALLOWED_ORIGINS="http://agilewheel.miguelsmuller.dev.br\,https://agilewheel.miguelsmuller.dev.br"
            SENTRY_DNS=${{ vars.SENTRY_DNS }}
            ENABLE_DOCS=${{ vars.ENABLE_DOCS }}
          service: 'agile-wheel-backend'
          image: 'docker.io/miguelsmuller/agile-wheel-backend:latest'

      - name: Show API Root URL
        run: 'curl "${{ steps.deploy.outputs.url }}/ping"'